"use strict";class InputField{constructor(name,type="input"){this.dom_invalid_feedback=document.getElementById("invalid-feedback-"+name),this.dom_input=document.querySelector(type+"#"+name),this.dom_form=document.getElementById("download_form")}make_valid(){this.dom_input.setCustomValidity(""),this.dom_invalid_feedback.display="none",this.dom_invalid_feedback.querySelector("ul").innerHTML=""}make_invalid(msg){this.dom_form.classList.add("was-validated"),this.dom_invalid_feedback.display="block",this.dom_invalid_feedback.querySelector("ul").innerHTML+="<li>"+msg+"</li>",this.dom_input.setCustomValidity(this.dom_invalid_feedback.textContent)}is_valid(){return this.dom_input.checkValidity()}get_value(){return this.dom_input.value}}class Form{constructor(){this.get_stations_data(),this.max_downloads=max_downloads,this.needs_captcha=needs_captcha,this.captcha_active_since,this.input_stids=new InputField("station_ids","textarea"),this.input_period_start=new InputField("period_start"),this.input_period_end=new InputField("period_end"),this.input_kind=new InputField("kind","select"),this.input_aggregation=new InputField("aggregation","select"),this.input_add_filled_by=new InputField("add_filled_by"),this.input_add_na_share=new InputField("add_na_share"),this.buttons={colapse_card_map:document.getElementById("btn_colapse_card_map"),colapse_card_manualy:document.getElementById("btn_colapse_card_manualy"),color_selection:document.getElementById("btn_color_selection"),remove_coloring:document.getElementById("btn_remove_coloring"),filter_stations:document.getElementById("btn_filter_stations"),remove_filter:document.getElementById("btn_remove_filter"),download_ts:document.getElementById("btn_download_ts")},this.loading_dom=document.getElementById("loading"),this.form_dom=document.getElementById("download_form"),"undefined"!=typeof base_url?L.Icon.Default.prototype.options.imagePath=base_url:L.Icon.Default.prototype.options.imagePath=location.origin+"/",L.Icon.Default.prototype.options.shadowUrl="static/weatherDB/img/Leaflet-Marker-shadow.png",this.IconDefault=L.Icon.Default.extend({options:{iconUrl:"static/weatherDB/img/marker-icon-blue.png",iconRetinaUrl:"static/weatherDB/img/marker-icon-2x-blue.png"}}),this.IconUnselect=L.Icon.Default.extend({options:{iconUrl:"static/weatherDB/img/marker-icon-red.png",iconRetinaUrl:"static/weatherDB/img/marker-icon-2x-red.png"}}),this.IconSelect=L.Icon.Default.extend({options:{iconUrl:"static/weatherDB/img/marker-icon-green.png",iconRetinaUrl:"static/weatherDB/img/marker-icon-2x-green.png"}}),this.IconSelectOutPeriod=L.Icon.Default.extend({options:{iconUrl:"static/weatherDB/img/marker-icon-orange.png",iconRetinaUrl:"static/weatherDB/img/marker-icon-2x-orange.png"}}),this.min_tstp=this.geojson_data.features[0].properties.filled_from,this.max_tstp=this.geojson_data.features[0].properties.filled_until,this.geojson_data.features.forEach(feature=>{null!=feature.properties.filled_from&feature.properties.filled_from<this.min_tstp|null==this.min_tstp&&(this.min_tstp=feature.properties.filled_from),null!=feature.properties.filled_from&feature.properties.filled_until>this.max_tstp|null==this.max_tstp&&(this.max_tstp=feature.properties.filled_until)}),this.min_tstp=new Date(this.min_tstp),this.max_tstp=new Date(this.max_tstp);let min_tstp_str=`${this.min_tstp.getFullYear()}-${String(this.min_tstp.getMonth()+1).padStart(2,"0")}-${String(this.min_tstp.getDate()).padStart(2,"0")}`,max_tstp_str=`${this.max_tstp.getFullYear()}-${String(this.max_tstp.getMonth()+1).padStart(2,"0")}-${String(this.max_tstp.getDate()).padStart(2,"0")}`;this.input_period_start.dom_input.setAttribute("min",min_tstp_str),this.input_period_start.dom_input.setAttribute("max",max_tstp_str),this.input_period_end.dom_input.setAttribute("min",min_tstp_str),this.input_period_end.dom_input.setAttribute("max",max_tstp_str),this.input_period_end.dom_input.value=max_tstp_str,this.input_period_start.dom_input.value=min_tstp_str,this.coloring_active=!1,this.filtering_active=!1,this.agg_to_alerted=!1,this.add_filled_by_alerted=!1,this.add_na_share_alerted=!1,this.legend=new(L.Control.extend({onAdd:map=>{let div=L.DomUtil.create("div","legend container-fluid");div.innerHTML=`<h3>${gettext("legend")}</h3>`;let icons=[this.IconSelect,this.IconSelectOutPeriod,this.IconUnselect],names=[gettext("selected"),gettext("selected, but not in date range"),gettext("not select")];for(let i=0;i<3;i++){let row=L.DomUtil.create("div","row justify-content-right"),col_icon=L.DomUtil.create("div","col-auto pe-0 ps-0"),icon_img=(new icons[i]).createIcon();icon_img.style="",icon_img.classList="",col_icon.appendChild(icon_img),row.appendChild(col_icon);let col_text=L.DomUtil.create("div","col");col_text.innerHTML+=`<b>${names[i]}</b>`,row.appendChild(col_text),div.appendChild(row)}return div}})),this.create_basemap(),this.load_stations_to_map(),this.input_add_filled_by.dom_input.checked=!1,this.input_add_na_share.dom_input.checked=!1}addButonEventListeners(){this.buttons.color_selection.addEventListener("click",event=>{this.apply_coloring(),event.target.textContent=gettext("Update Coloring"),this.buttons.remove_coloring.classList.remove("invisible")}),this.buttons.remove_coloring.addEventListener("click",event=>{this.remove_coloring(),this.buttons.color_selection.textContent=gettext("Color Selection on map"),event.target.classList.add("invisible")}),this.buttons.filter_stations.addEventListener("click",event=>{this.apply_filter(),event.target.textContent=gettext("Update Filter"),this.buttons.remove_filter.classList.remove("invisible")}),this.buttons.remove_filter.addEventListener("click",event=>{this.remove_filter(),this.buttons.filter_stations.textContent=gettext("Filter Selection on map"),event.target.classList.add("invisible")}),this.buttons.download_ts.addEventListener("click",event=>{event.stopPropagation(),event.preventDefault(),this.check_form()?(form.loading_dom.style.display="block",$.ajax({type:"POST",url:location.origin.concat(download_url),data:$("#download_form").serialize(),success:function(data){form.loading_dom.style.display="none";let link=document.createElement("a");link.href=data,link.click()},error:function(jqXHR,textStatus,errorThrown){console.log("ERROR:"),console.log(errorThrown),console.log(textStatus),console.log(jqXHR),jqXHR.responseText.search("CSRF verification failed")>=0?alert(gettext("There was an Error, while creating the timeseries. \nProbably your window was opened for too long.\nPlease reload the page and try again.")):alert(gettext("There was an Error, while creating the timeseries. Sorry!")),form.loading_dom.style.display="none"}})):alert(gettext("Please check the input for errors."))})}addInputEventListeners(){this.input_stids.dom_input.addEventListener("change",e=>{this.check_form(),this.update_coloring(),this.update_filter()}),this.input_period_start.dom_input.addEventListener("change",e=>{this.check_period(),this.update_coloring()}),this.input_period_end.dom_input.addEventListener("change",e=>{this.check_period(),this.update_coloring()}),this.input_aggregation.dom_input.addEventListener("change",e=>{this.check_aggregation()}),this.form_dom.addEventListener("keydown",e=>{e.preventDefault,"Enter"==e.key&&this.check_form()}),this.input_kind.dom_input.addEventListener("change",e=>{this.check_add_filled_by(),this.check_period(),this.update_coloring()}),this.input_add_filled_by.dom_input.addEventListener("change",e=>{this.check_add_filled_by()}),this.input_add_na_share.dom_input.addEventListener("change",e=>{this.check_add_na_share()})}addEventListeners(){this.addButonEventListeners(),this.addInputEventListeners()}create_basemap(){this.map=L.map(document.getElementById("map")).setView([51.351,10.459],6),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',maxZoom:20,tilesextent:[7.5,47.27,10.5,55.06]}).addTo(this.map),this.map_scale=L.control.scale(),this.map_scale.addTo(this.map)}get_stations_data(){this.geojson_data=JSON.parse(document.getElementById("meta_n-data").textContent),this.station_ids=[];for(let feature of this.geojson_data.features)this.station_ids.push(feature.properties.pk)}load_stations_to_map(filter=(feature=>!0)){null!=this.lmarkers&&this.lmarkers.clearLayers(),this.lmarkers=L.markerClusterGroup(),this.lmarkers.addLayer(L.geoJSON(this.geojson_data,{filter:filter})),this.lmarkers=this.lmarkers.bindPopup(layer=>{let stid=layer.feature.properties.pk,raw_from=new Date(layer.feature.properties.raw_from),raw_until=new Date(layer.feature.properties.raw_until),filled_from=new Date(layer.feature.properties.filled_from),filled_until=new Date(layer.feature.properties.filled_until),richter_class=layer.feature.properties.richter_class,quot_regnie_filled=Math.round(100/layer.feature.properties.quot_filled_regnie*1e3)/10,quot_hyras_filled=Math.round(100/layer.feature.properties.quot_filled_hyras*1e3)/10,quot_corr_filled=Math.round(10*layer.feature.properties.quot_corr_filled)/10,label_btn_select=this.is_selected(stid)?gettext("unselect"):gettext("select"),date_options={year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"2-digit"},str;return`<div class="container pl-0"><div class="row"><div class="col"><h6 style="float: left">${gettext("Station ID")}: ${stid}</h6>                    <button class="btn btn-primary pr-3" style="float:right" type="button" onclick="button_select_station('${stid}', event)">${label_btn_select}</button></div></div></div>                    <b>${gettext("available period of own raw data")}:</b>                    <br>${raw_from.toLocaleString("de-DE",date_options)} -                     ${raw_until.toLocaleString("de-DE",date_options)}                    <br><b>${gettext("available period of filled data")}:</b>                    <br>${filled_from.toLocaleString("de-DE",date_options)} -                     ${filled_until.toLocaleString("de-DE",date_options)}\n                    <br><b>${gettext("exposition class")}:</b> ${richter_class}\n                    <br><b>${gettext("factors")}:</b><br>\n                    N<sub>${gettext("corrected")}</sub> = ${quot_corr_filled}% &#8226; N<sub>${gettext("filled")}</sub> <br>\n                    N<sub>${gettext("filled")}</sub> = ${quot_hyras_filled}% &#8226; N<sub>${gettext("multi_annual")}, HYRAS</sub><br>\n                    N<sub>${gettext("filled")}</sub> = ${quot_regnie_filled}% &#8226; N<sub>${gettext("multi_annual")}, REGNIE</sub><br>`}),this.lmarkers.getLayers().forEach(layer=>{layer.setIcon(new this.IconDefault)}),this.lmarkers.addTo(this.map),this.markers={},this.lmarkers.getLayers().forEach(layer=>{this.markers[layer.feature.properties.pk]=layer}),this.coloring_active&&this.apply_coloring()}apply_coloring(){this.coloring_active=!0;let selected_stids=this.get_selected_stations(),period_start=this.get_period_start(),period_end=this.get_period_end(),kind=this.get_kind(),check_period_end=layer=>!0;null!=period_end&&(check_period_end=["raw","qc"].includes(kind)?layer=>new Date(layer.feature.properties.raw_until)>=period_end:layer=>new Date(layer.feature.properties.filled_until)>=period_end);let check_period_start=layer=>!0;null!=period_start&&(check_period_start=["raw","qc"].includes(kind)?layer=>new Date(layer.feature.properties.raw_from)<=period_start:layer=>new Date(layer.feature.properties.filled_from)<=period_start),this.lmarkers.getLayers().forEach(layer=>{selected_stids.includes(layer.feature.properties.pk)?check_period_start(layer)&&check_period_end(layer)?layer.setIcon(new this.IconSelect):layer.setIcon(new this.IconSelectOutPeriod):layer.setIcon(new this.IconUnselect)}),this.legend.addTo(this.map)}remove_coloring(){this.coloring_active=!1,this.lmarkers.getLayers().forEach(layer=>{layer.setIcon(new this.IconDefault)}),this.legend.remove()}update_coloring(){this.coloring_active&&this.apply_coloring()}get_period_start(){return new Date(this.input_period_start.dom_input.value+"T00:00:00")}get_period_end(){return new Date(this.input_period_end.dom_input.value+"T23:50:00")}get_aggregation(){return this.input_aggregation.dom_input.value}get_selected_stations(){let stids=this.input_stids.dom_input.value.split(",").map(el=>el.trim());return 1==stids.length&""==stids[0]?[]:stids}get_kind(){return this.input_kind.get_value()}is_selected(stid){return this.get_selected_stations().includes(String(stid))}apply_filter(){let selected_stids=this.get_selected_stations();this.filtering_active=!0;let filter_stids=feature=>!1;selected_stids.length>0&&(filter_stids=feature=>selected_stids.includes(feature.properties.pk));let filter=feature=>filter_stids(feature);this.load_stations_to_map(filter=filter)}remove_filter(){this.load_stations_to_map(),this.filtering_active=!1}update_filter(){this.filtering_active&&this.apply_filter()}check_stations_input(){this.input_stids.make_valid(),this.form_dom.classList.add("was-validated");let in_text=this.input_stids.dom_input.value;if(0==in_text.length)return this.input_stids.make_invalid(gettext("You didn't select any station. Please enter a comma-seperated list of station IDs.")),!1;if(!/^\s*(\d{1,5})+(\s*[,;]{1}\s*\d{1,5})*[\s,;]*$/.test(in_text))return this.input_stids.make_invalid(gettext("The given list of stations is not in the right pattern.<br>The Station Ids must be provided as a comma or semmicolon seperated list of numbers.")),!1;let in_stids=in_text.trim().replaceAll(";",",").replaceAll(/[,\s]+$/gm,"").split(",").map(el=>el.trim());in_stids=Array.from(new Set(in_stids));let valid_stids=[],invalid_stids=[];for(let stid of in_stids)this.station_ids.includes(stid)?valid_stids.push(stid):invalid_stids.push(stid);return invalid_stids.length>0&&this.input_stids.make_invalid(gettext("The following Station Ids are not valid and should get removed:")+"<br>"+invalid_stids.join(", ")),this.input_stids.dom_input.value=in_stids.join(", "),this.get_selected_stations().length>this.max_downloads&&this.input_stids.make_invalid(`${gettext("You are only able to download")} ${this.max_downloads} ${gettext("stations at once")}. <br>${gettext("If you want to download more stations please use the")} <a href='weatherdb/package'>${gettext("Python package")}</a> <br>${gettext("or register for an account and make an E-mail to request a higher limit.")}`),this.input_stids.is_valid()}check_period(){this.input_period_end.make_valid(),this.input_period_start.make_valid();let selected_stids=this.get_selected_stations(),selected_stations=this.geojson_data.features.filter(el=>selected_stids.includes(el.properties.pk));if(selected_stations.length>0&["filled","best"].includes(this.input_kind.get_value())){let min_tstp,max_tstp;selected_stations.forEach(feature=>{void 0===min_tstp|feature.properties.filled_from<min_tstp&&(min_tstp=feature.properties.filled_from),void 0===max_tstp|feature.properties.filled_until>max_tstp&&(max_tstp=feature.properties.filled_until)}),min_tstp=new Date(min_tstp),max_tstp=new Date(max_tstp.split("T")[0]+"T23:59:59");let msg_invalid_period=`${gettext("The date must be between")} ${min_tstp.toLocaleDateString()} ${gettext("and")} ${max_tstp.toLocaleDateString()} ${gettext("for the selected stations and data kind")}.`;this.get_period_start()<min_tstp&&this.input_period_start.make_invalid(msg_invalid_period),this.get_period_end()>max_tstp&&this.input_period_end.make_invalid(msg_invalid_period)}return this.input_period_start.is_valid()&this.input_period_end.is_valid()}check_aggregation(skip_when_alerted=!1){if(!skip_when_alerted&!this.agg_to_alerted){let alert_aggregations=["10 min","hour"],alert_box=document.getElementById("agg_alert_box");alert_aggregations.includes(this.get_aggregation())?(this.agg_to_alerted=!0,alert_box.innerHTML='<div class="alert alert-dismissible alert-info"><button type="button" class="close" data-dismiss="alert">×</button><p class="mb-0">'+gettext("The temperature and evapotranspiration data are only downloaded as daily values.<br>Therefor only the Precipitation values will be in this frequency.")+"</p></div></div>"):alert_box.innerHTML=""}return!0}check_add_filled_by(skip_when_alerted=!1){if(!(skip_when_alerted&this.add_filled_by_alerted)){let add_filled_by=this.input_add_filled_by.dom_input.checked,alert_box=document.getElementById("add_filled_by_alert_box"),kind=this.input_kind.get_value();if(add_filled_by){if(["raw","qc"].includes(kind))return alert_box.innerHTML='<div class="alert alert-dismissible alert-info"><button type="button" class="close" data-dismiss="alert">×</button><p class="mb-0">'+gettext("You selected to download unfilled data, therefor it is not possible to add filling informations.")+"</p></div></div>",this.add_filled_by_alerted=!0,!1;alert_box.innerHTML=""}else alert_box.innerHTML="",this.input_add_filled_by.dom_input.disabled=["raw","qc"].includes(kind)}return!0}check_add_na_share(skip_when_alerted=!1){if(!(skip_when_alerted&this.add_na_share_alerted)){let add_na_share=this.input_add_na_share.dom_input.checked,alert_box=document.getElementById("add_na_share_alert_box");if(add_na_share){let agg_to=this.input_aggregation.get_value(),msg="";"10 min"==agg_to?msg=gettext("You selected to download the data in 10 minutes resolution.<br>Therefor no column is added, as this column is only added, when the data gets aggregated."):"day"==agg_to&&(msg=gettext("You selected to download the data in daily resolution.<br>Therefor no column is added for T and ET, as this column is only added, when the data gets aggregated.")),""!=msg?(alert_box.innerHTML=`<div class="alert alert-dismissible alert-info"><button type="button" class="close" data-dismiss="alert">×</button><p class="mb-0">${msg}</p></div></div>`,this.add_na_share_alerted=!0):alert_box.innerHTML=""}else alert_box.innerHTML=""}return!0}check_hcaptcha(is_submit=!1){if(this.needs_captcha){let dom_invalid_feedback=document.getElementById("invalid-feedback-hcaptcha"),dom_input=document.querySelector("div#hcaptcha_div");return""!=hcaptcha.getRespKey()?is_submit&this.captcha_active_since<new Date(Date.now()-6e5)?(hcaptcha.reset(),this.captcha_active_since=void 0,dom_invalid_feedback.style.display="block",dom_invalid_feedback.innerHTML=gettext("Your last HCaptcha test was more than 10 minutes ago. Please redo this hCaptcha test."),dom_input.classList.add("border","border-danger"),!1):(this.captcha_active_since=new Date,dom_invalid_feedback.style.display="none",dom_invalid_feedback.innerHTML="",dom_input.classList.remove("border","border-danger"),!0):(dom_invalid_feedback.style.display="block",dom_invalid_feedback.innerHTML=gettext("Please do this hCaptcha test!"),dom_input.classList.add("border","border-danger"),!1)}return!0}check_form(){return this.form_dom.classList.add("was-validated"),this.check_stations_input()&this.check_period()&this.check_aggregation(!0)&this.check_add_na_share(!0)&this.check_add_filled_by(!0)&this.check_hcaptcha(!0)}select_station(stid){if(this.check_stid(stid)){let selected_stids;this.get_selected_stations().length>0?this.input_stids.dom_input.value+=", "+stid:this.input_stids.dom_input.value+=stid,this.input_stids.dom_input.dispatchEvent(new Event("change"))}else console.log(`The station id ${stid} is not a valid ID`);this.check_stations_input(),this.update_coloring(),this.update_filter()}unselect_station(stid){let selected_stids=this.get_selected_stations();selected_stids.includes(stid)&&(selected_stids.splice(selected_stids.indexOf(stid),1),this.input_stids.dom_input.value=selected_stids.join(", "),this.update_coloring(),this.update_filter())}check_stid(stid){return this.station_ids.includes(String(stid))}}const form=new Form;let button_select_station=(stid,event)=>{event.target.innerText==gettext("select")?(form.select_station(stid),event.target.innerText=gettext("unselect")):(form.unselect_station(stid),event.target.innerText=gettext("select"))};form.addEventListeners();