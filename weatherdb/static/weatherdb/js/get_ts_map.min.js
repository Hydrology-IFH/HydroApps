"use strict";class InputField{constructor(t,e="input"){this.dom_invalid_feedback=document.getElementById("invalid-feedback-"+t),this.dom_input=document.querySelector(e+"#"+t),this.dom_form=document.getElementById("download_form")}make_valid(){this.dom_input.setCustomValidity(""),this.dom_invalid_feedback.display="none",this.dom_invalid_feedback.querySelector("ul").innerHTML=""}make_invalid(t){this.dom_form.classList.add("was-validated"),this.dom_invalid_feedback.display="block",this.dom_invalid_feedback.querySelector("ul").innerHTML+="<li>"+t+"</li>",this.dom_input.setCustomValidity(this.dom_invalid_feedback.textContent)}is_valid(){return this.dom_input.checkValidity()}get_value(){return this.dom_input.value}}class Form{constructor(){this.get_stations_data(),this.max_downloads=max_downloads,this.needs_captcha=needs_captcha,this.captcha_active_since,this.input_stids=new InputField("station_ids","textarea"),this.input_period_start=new InputField("period_start"),this.input_period_end=new InputField("period_end"),this.input_kind=new InputField("kind","select"),this.input_aggregation=new InputField("aggregation","select"),this.input_add_filled_by=new InputField("add_filled_by"),this.input_add_na_share=new InputField("add_na_share"),this.buttons={colapse_card_map:document.getElementById("btn_colapse_card_map"),colapse_card_manualy:document.getElementById("btn_colapse_card_manualy"),color_selection:document.getElementById("btn_color_selection"),remove_coloring:document.getElementById("btn_remove_coloring"),filter_stations:document.getElementById("btn_filter_stations"),remove_filter:document.getElementById("btn_remove_filter"),download_ts:document.getElementById("btn_download_ts")},this.loading_dom=document.getElementById("loading"),this.form_dom=document.getElementById("download_form"),"undefined"!=typeof base_url?L.Icon.Default.prototype.options.imagePath=base_url:L.Icon.Default.prototype.options.imagePath=location.origin+"/",L.Icon.Default.prototype.options.shadowUrl="static/weatherdb/img/Leaflet-Marker-shadow.png",this.IconDefault=L.Icon.Default.extend({options:{iconUrl:"static/weatherdb/img/marker-icon-blue.png",iconRetinaUrl:"static/weatherdb/img/marker-icon-2x-blue.png"}}),this.IconUnselect=L.Icon.Default.extend({options:{iconUrl:"static/weatherdb/img/marker-icon-red.png",iconRetinaUrl:"static/weatherdb/img/marker-icon-2x-red.png"}}),this.IconSelect=L.Icon.Default.extend({options:{iconUrl:"static/weatherdb/img/marker-icon-green.png",iconRetinaUrl:"static/weatherdb/img/marker-icon-2x-green.png"}}),this.IconSelectOutPeriod=L.Icon.Default.extend({options:{iconUrl:"static/weatherdb/img/marker-icon-orange.png",iconRetinaUrl:"static/weatherdb/img/marker-icon-2x-orange.png"}}),this.min_tstp=this.geojson_data.features[0].properties.filled_from,this.max_tstp=this.geojson_data.features[0].properties.filled_until,this.geojson_data.features.forEach(t=>{null!=t.properties.filled_from&t.properties.filled_from<this.min_tstp|null==this.min_tstp&&(this.min_tstp=t.properties.filled_from),null!=t.properties.filled_from&t.properties.filled_until>this.max_tstp|null==this.max_tstp&&(this.max_tstp=t.properties.filled_until)}),this.min_tstp=new Date(this.min_tstp),this.max_tstp=new Date(this.max_tstp);let t=`${this.min_tstp.getFullYear()}-${String(this.min_tstp.getMonth()+1).padStart(2,"0")}-${String(this.min_tstp.getDate()).padStart(2,"0")}`,e=`${this.max_tstp.getFullYear()}-${String(this.max_tstp.getMonth()+1).padStart(2,"0")}-${String(this.max_tstp.getDate()).padStart(2,"0")}`;this.input_period_start.dom_input.setAttribute("min",t),this.input_period_start.dom_input.setAttribute("max",e),this.input_period_end.dom_input.setAttribute("min",t),this.input_period_end.dom_input.setAttribute("max",e),this.input_period_end.dom_input.value=e,this.input_period_start.dom_input.value=t,this.coloring_active=!1,this.filtering_active=!1,this.agg_to_alerted=!1,this.add_filled_by_alerted=!1,this.add_na_share_alerted=!1,this.legend=new(L.Control.extend({onAdd:t=>{let e=L.DomUtil.create("div","legend container-fluid");e.innerHTML=`<h3>${gettext("legend")}</h3>`;let i=[this.IconSelect,this.IconSelectOutPeriod,this.IconUnselect],s=[gettext("selected"),gettext("selected, but not in date range"),gettext("not select")];for(let t=0;t<3;t++){let n=L.DomUtil.create("div","row justify-content-right"),a=L.DomUtil.create("div","col-auto pe-0 ps-0"),o=(new i[t]).createIcon();o.style="",o.classList="",a.appendChild(o),n.appendChild(a);let r=L.DomUtil.create("div","col");r.innerHTML+=`<b>${s[t]}</b>`,n.appendChild(r),e.appendChild(n)}return e}})),this.create_basemap(),this.load_stations_to_map(),this.input_add_filled_by.dom_input.checked=!1,this.input_add_na_share.dom_input.checked=!1}addButonEventListeners(){this.buttons.color_selection.addEventListener("click",t=>{this.apply_coloring(),t.target.textContent=gettext("Update Coloring"),this.buttons.remove_coloring.classList.remove("invisible")}),this.buttons.remove_coloring.addEventListener("click",t=>{this.remove_coloring(),this.buttons.color_selection.textContent=gettext("Color Selection on map"),t.target.classList.add("invisible")}),this.buttons.filter_stations.addEventListener("click",t=>{this.apply_filter(),t.target.textContent=gettext("Update Filter"),this.buttons.remove_filter.classList.remove("invisible")}),this.buttons.remove_filter.addEventListener("click",t=>{this.remove_filter(),this.buttons.filter_stations.textContent=gettext("Filter Selection on map"),t.target.classList.add("invisible")}),this.buttons.download_ts.addEventListener("click",t=>{t.stopPropagation(),t.preventDefault(),this.check_form()?(form.loading_dom.style.display="block",$.ajax({type:"POST",url:location.origin.concat(download_url),data:$("#download_form").serialize(),success:function(t){form.loading_dom.style.display="none";let e=document.createElement("a");e.href=t,e.click()},error:function(t,e,i){console.log("ERROR:"),console.log(i),console.log(e),console.log(t),t.responseText.search("CSRF verification failed")>=0?alert(gettext("There was an Error, while creating the timeseries. \nProbably your window was opened for too long.\nPlease reload the page and try again.")):alert(gettext("There was an Error, while creating the timeseries. Sorry!")),form.loading_dom.style.display="none"}})):alert(gettext("Please check the input for errors."))})}addInputEventListeners(){this.input_stids.dom_input.addEventListener("change",t=>{this.check_form(),this.update_coloring(),this.update_filter()}),this.input_period_start.dom_input.addEventListener("change",t=>{this.check_period(),this.update_coloring()}),this.input_period_end.dom_input.addEventListener("change",t=>{this.check_period(),this.update_coloring()}),this.input_aggregation.dom_input.addEventListener("change",t=>{this.check_aggregation()}),this.form_dom.addEventListener("keydown",t=>{t.preventDefault,"Enter"==t.key&&this.check_form()}),this.input_kind.dom_input.addEventListener("change",t=>{this.check_add_filled_by(),this.check_period(),this.update_coloring()}),this.input_add_filled_by.dom_input.addEventListener("change",t=>{this.check_add_filled_by()}),this.input_add_na_share.dom_input.addEventListener("change",t=>{this.check_add_na_share()})}addEventListeners(){this.addButonEventListeners(),this.addInputEventListeners()}create_basemap(){this.map=L.map(document.getElementById("map")).setView([51.351,10.459],6),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',maxZoom:20,tilesextent:[7.5,47.27,10.5,55.06]}).addTo(this.map),this.map_scale=L.control.scale(),this.map_scale.addTo(this.map)}get_stations_data(){this.geojson_data=JSON.parse(document.getElementById("meta_p-data").textContent),this.quots=JSON.parse(document.getElementById("quots-data").textContent),this.station_ids=[];for(let t of this.geojson_data.features)this.station_ids.push(t.properties.pk)}load_stations_to_map(t=(t=>!0)){null!=this.lmarkers&&this.lmarkers.clearLayers(),this.lmarkers=L.markerClusterGroup(),this.lmarkers.addLayer(L.geoJSON(this.geojson_data,{filter:t})),this.lmarkers=this.lmarkers.bindPopup(t=>{let e=t.feature.properties.pk,i=new Date(t.feature.properties.raw_from),s=new Date(t.feature.properties.raw_until),n=new Date(t.feature.properties.filled_from),a=new Date(t.feature.properties.filled_until),o=t.feature.properties.richter_class,r=this.quots[e].filled_hyras,d=this.quots[e].corr_filled,l=Math.round(t.feature.properties.qc_dropped,2),_=this.is_selected(e)?gettext("unselect"):gettext("select"),c={year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"2-digit"},h=`<div class="container pl-0"><div class="row"><div class="col"><h6 style="float: left">${gettext("Station ID")}: ${e}</h6>                    <button class="btn btn-primary pr-3" style="float:right" type="button" onclick="button_select_station('${e}', event)">${_}</button></div></div></div>                    <b>${gettext("available period of own raw data")}:</b>                    <br><div class="leaf-pop-indent">                        ${i.toLocaleString("de-DE",c)} -                         ${s.toLocaleString("de-DE",c)}                    </div>                    <b>${gettext("available period of filled data")}:</b>                    <br><div class="leaf-pop-indent">\n                        ${n.toLocaleString("de-DE",c)} -                         ${a.toLocaleString("de-DE",c)}                    </div>                    <b>${gettext("exposition class")}:</b> ${o}                     <br><b>${gettext("factors")}:</b><br>                    <div class="leaf-pop-indent">                        N<sub>${gettext("corrected")}</sub> = ${d}% &#8226; N<sub>${gettext("filled")}</sub> <br>                        N<sub>${gettext("filled")}</sub> = ${r}% &#8226; N<sub>${gettext("multi_annual")}, HYRAS</sub><br>                        Quality Check dropped ${l}% of raw values.                    </div>`;return h}),this.lmarkers.getLayers().forEach(t=>{t.setIcon(new this.IconDefault)}),this.lmarkers.addTo(this.map),this.markers={},this.lmarkers.getLayers().forEach(t=>{this.markers[t.feature.properties.pk]=t}),this.coloring_active&&this.apply_coloring()}apply_coloring(){this.coloring_active=!0;let t=this.get_selected_stations(),e=this.get_period_start(),i=this.get_period_end(),s=this.get_kind(),n=t=>!0;null!=i&&(n=["raw","qc"].includes(s)?t=>new Date(t.feature.properties.raw_until)>=i:t=>new Date(t.feature.properties.filled_until)>=i);let a=t=>!0;null!=e&&(a=["raw","qc"].includes(s)?t=>new Date(t.feature.properties.raw_from)<=e:t=>new Date(t.feature.properties.filled_from)<=e),this.lmarkers.getLayers().forEach(e=>{t.includes(e.feature.properties.pk)?a(e)&&n(e)?e.setIcon(new this.IconSelect):e.setIcon(new this.IconSelectOutPeriod):e.setIcon(new this.IconUnselect)}),this.legend.addTo(this.map)}remove_coloring(){this.coloring_active=!1,this.lmarkers.getLayers().forEach(t=>{t.setIcon(new this.IconDefault)}),this.legend.remove()}update_coloring(){this.coloring_active&&this.apply_coloring()}get_period_start(){return new Date(this.input_period_start.dom_input.value+"T00:00:00")}get_period_end(){return new Date(this.input_period_end.dom_input.value+"T23:50:00")}get_aggregation(){return this.input_aggregation.dom_input.value}get_selected_stations(){let t=this.input_stids.dom_input.value.split(",").map(t=>t.trim());return 1==t.length&""==t[0]?[]:t}get_kind(){return this.input_kind.get_value()}is_selected(t){return this.get_selected_stations().includes(String(t))}apply_filter(){let t=this.get_selected_stations();this.filtering_active=!0;let e=t=>!1;t.length>0&&(e=(e=>t.includes(e.properties.pk)));let i=t=>e(t);this.load_stations_to_map(i=i)}remove_filter(){this.load_stations_to_map(),this.filtering_active=!1}update_filter(){this.filtering_active&&this.apply_filter()}check_stations_input(){this.input_stids.make_valid(),this.form_dom.classList.add("was-validated");let t=this.input_stids.dom_input.value;if(0==t.length)return this.input_stids.make_invalid(gettext("You didn't select any station. Please enter a comma-seperated list of station IDs.")),!1;if(!/^\s*(\d{1,5})+(\s*[,;]{1}\s*\d{1,5})*[\s,;]*$/.test(t))return this.input_stids.make_invalid(gettext("The given list of stations is not in the right pattern.<br>The Station Ids must be provided as a comma or semmicolon seperated list of numbers.")),!1;let e=t.trim().replaceAll(";",",").replaceAll(/[,\s]+$/gm,"").split(",").map(t=>t.trim());e=Array.from(new Set(e));let i=[],s=[];for(let t of e)this.station_ids.includes(t)?i.push(t):s.push(t);return s.length>0&&this.input_stids.make_invalid(gettext("The following Station Ids are not valid and should get removed:")+"<br>"+s.join(", ")),this.input_stids.dom_input.value=e.join(", "),this.get_selected_stations().length>this.max_downloads&&this.input_stids.make_invalid(`${gettext("You are only able to download")} ${this.max_downloads} ${gettext("stations at once")}. <br>${gettext("If you want to download more stations please use the")} <a href='weatherdb/package'>${gettext("Python package")}</a> <br>${gettext("or register for an account and make an E-mail to request a higher limit.")}`),this.input_stids.is_valid()}check_period(){this.input_period_end.make_valid(),this.input_period_start.make_valid();let t=this.get_selected_stations(),e=this.geojson_data.features.filter(e=>t.includes(e.properties.pk));if(e.length>0&["filled","best"].includes(this.input_kind.get_value())){let t,i;e.forEach(e=>{void 0===t|e.properties.filled_from<t&&(t=e.properties.filled_from),void 0===i|e.properties.filled_until>i&&(i=e.properties.filled_until)}),t=new Date(t),i=new Date(i.split("T")[0]+"T23:59:59");let s=`${gettext("The date must be between")} ${t.toLocaleDateString()} ${gettext("and")} ${i.toLocaleDateString()} ${gettext("for the selected stations and data kind")}.`;this.get_period_start()<t&&this.input_period_start.make_invalid(s),this.get_period_end()>i&&this.input_period_end.make_invalid(s)}return this.input_period_start.is_valid()&this.input_period_end.is_valid()}check_aggregation(t=!1){if(!t&!this.agg_to_alerted){let t=["10 min","hour"],e=document.getElementById("agg_alert_box");t.includes(this.get_aggregation())?(this.agg_to_alerted=!0,e.innerHTML='<div class="alert alert-dismissible alert-info"><button type="button" class="btn-close" data-bs-dismiss="alert"></button><p class="mb-0">'+gettext("The temperature and evapotranspiration data are only downloaded as daily values.<br>Therefor only the Precipitation values will be in this frequency.")+"</p></div></div>"):e.innerHTML=""}return!0}check_add_filled_by(t=!1){if(!(t&this.add_filled_by_alerted)){let t=this.input_add_filled_by.dom_input.checked,e=document.getElementById("add_filled_by_alert_box"),i=this.input_kind.get_value();if(t){if(["raw","qc"].includes(i))return e.innerHTML='<div class="alert alert-dismissible alert-info"><button type="button" class="btn-close" data-bs-dismiss="alert"></button><p class="mb-0">'+gettext("You selected to download unfilled data, therefor it is not possible to add filling informations.")+"</p></div></div>",this.add_filled_by_alerted=!0,!1;e.innerHTML=""}else e.innerHTML="",this.input_add_filled_by.dom_input.disabled=["raw","qc"].includes(i)}return!0}check_add_na_share(t=!1){if(!(t&this.add_na_share_alerted)){let t=this.input_add_na_share.dom_input.checked,e=document.getElementById("add_na_share_alert_box");if(t){let t=this.input_aggregation.get_value(),i="";"10 min"==t?i=gettext("You selected to download the data in 10 minutes resolution.<br>Therefor no column is added, as this column is only added, when the data gets aggregated."):"day"==t&&(i=gettext("You selected to download the data in daily resolution.<br>Therefor no column is added for T and ET, as this column is only added, when the data gets aggregated.")),""!=i?(e.innerHTML=`<div class="alert alert-dismissible alert-info"><button type="button" class="btn-close" data-bs-dismiss="alert"></button><p class="mb-0">${i}</p></div></div>`,this.add_na_share_alerted=!0):e.innerHTML=""}else e.innerHTML=""}return!0}check_hcaptcha(t=!1){if(this.needs_captcha){let e=document.getElementById("invalid-feedback-hcaptcha"),i=document.querySelector("div#hcaptcha_div");return""!=hcaptcha.getRespKey()?t&this.captcha_active_since<new Date(Date.now()-6e5)?(hcaptcha.reset(),this.captcha_active_since=void 0,e.style.display="block",e.innerHTML=gettext("Your last HCaptcha test was more than 10 minutes ago. Please redo this hCaptcha test."),i.classList.add("border","border-danger"),!1):(this.captcha_active_since=new Date,e.style.display="none",e.innerHTML="",i.classList.remove("border","border-danger"),!0):(e.style.display="block",e.innerHTML=gettext("Please do this hCaptcha test!"),i.classList.add("border","border-danger"),!1)}return!0}check_form(){return this.form_dom.classList.add("was-validated"),this.check_stations_input()&this.check_period()&this.check_aggregation(!0)&this.check_add_na_share(!0)&this.check_add_filled_by(!0)&this.check_hcaptcha(!0)}select_station(t){if(this.check_stid(t)){let e=this.get_selected_stations();e.length>0?this.input_stids.dom_input.value+=", "+t:this.input_stids.dom_input.value+=t,this.input_stids.dom_input.dispatchEvent(new Event("change"))}else console.log(`The station id ${t} is not a valid ID`);this.check_stations_input(),this.update_coloring(),this.update_filter()}unselect_station(t){let e=this.get_selected_stations();e.includes(t)&&(e.splice(e.indexOf(t),1),this.input_stids.dom_input.value=e.join(", "),this.update_coloring(),this.update_filter())}check_stid(t){return this.station_ids.includes(String(t))}}const form=new Form;let button_select_station=(t,e)=>{e.target.innerText==gettext("select")?(form.select_station(t),e.target.innerText=gettext("unselect")):(form.unselect_station(t),e.target.innerText=gettext("select"))};form.addEventListeners();